# coding: utf-8

"""
    Neurelo API Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from neurelo.models.restaurants_update_input_about import RestaurantsUpdateInputAbout
from neurelo.models.restaurants_update_input_rating import RestaurantsUpdateInputRating
from neurelo.models.restaurants_update_input_reviews import RestaurantsUpdateInputReviews

class RestaurantsUpdateInput(BaseModel):
    """
    RestaurantsUpdateInput
    """
    about: Optional[RestaurantsUpdateInputAbout] = None
    name: Optional[RestaurantsUpdateInputAbout] = None
    rating: Optional[RestaurantsUpdateInputRating] = None
    reviews: Optional[RestaurantsUpdateInputReviews] = None
    __properties = ["about", "name", "rating", "reviews"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RestaurantsUpdateInput:
        """Create an instance of RestaurantsUpdateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of about
        if self.about:
            _dict['about'] = self.about.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviews
        if self.reviews:
            _dict['reviews'] = self.reviews.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RestaurantsUpdateInput:
        """Create an instance of RestaurantsUpdateInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RestaurantsUpdateInput.parse_obj(obj)

        _obj = RestaurantsUpdateInput.parse_obj({
            "about": RestaurantsUpdateInputAbout.from_dict(obj.get("about")) if obj.get("about") is not None else None,
            "name": RestaurantsUpdateInputAbout.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "rating": RestaurantsUpdateInputRating.from_dict(obj.get("rating")) if obj.get("rating") is not None else None,
            "reviews": RestaurantsUpdateInputReviews.from_dict(obj.get("reviews")) if obj.get("reviews") is not None else None
        })
        return _obj


