# coding: utf-8

"""
    Neurelo API Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from neurelo.models.restaurants_where_input_about import RestaurantsWhereInputAbout
from neurelo.models.restaurants_where_input_rating import RestaurantsWhereInputRating
from neurelo.models.string_nullable_list_filter import StringNullableListFilter

class RestaurantsWhereInput(BaseModel):
    """
    RestaurantsWhereInput
    """
    var_and: Optional[RestaurantsWhereInputAND] = Field(None, alias="AND")
    var_not: Optional[RestaurantsWhereInputAND] = Field(None, alias="NOT")
    var_or: Optional[conlist(RestaurantsWhereInput)] = Field(None, alias="OR")
    about: Optional[RestaurantsWhereInputAbout] = None
    name: Optional[RestaurantsWhereInputAbout] = None
    rating: Optional[RestaurantsWhereInputRating] = None
    reviews: Optional[StringNullableListFilter] = None
    __properties = ["AND", "NOT", "OR", "about", "name", "rating", "reviews"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RestaurantsWhereInput:
        """Create an instance of RestaurantsWhereInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_and
        if self.var_and:
            _dict['AND'] = self.var_and.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_not
        if self.var_not:
            _dict['NOT'] = self.var_not.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in var_or (list)
        _items = []
        if self.var_or:
            for _item in self.var_or:
                if _item:
                    _items.append(_item.to_dict())
            _dict['OR'] = _items
        # override the default output from pydantic by calling `to_dict()` of about
        if self.about:
            _dict['about'] = self.about.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviews
        if self.reviews:
            _dict['reviews'] = self.reviews.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RestaurantsWhereInput:
        """Create an instance of RestaurantsWhereInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RestaurantsWhereInput.parse_obj(obj)

        _obj = RestaurantsWhereInput.parse_obj({
            "var_and": RestaurantsWhereInputAND.from_dict(obj.get("AND")) if obj.get("AND") is not None else None,
            "var_not": RestaurantsWhereInputAND.from_dict(obj.get("NOT")) if obj.get("NOT") is not None else None,
            "var_or": [RestaurantsWhereInput.from_dict(_item) for _item in obj.get("OR")] if obj.get("OR") is not None else None,
            "about": RestaurantsWhereInputAbout.from_dict(obj.get("about")) if obj.get("about") is not None else None,
            "name": RestaurantsWhereInputAbout.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "rating": RestaurantsWhereInputRating.from_dict(obj.get("rating")) if obj.get("rating") is not None else None,
            "reviews": StringNullableListFilter.from_dict(obj.get("reviews")) if obj.get("reviews") is not None else None
        })
        return _obj

from neurelo.models.restaurants_where_input_and import RestaurantsWhereInputAND
RestaurantsWhereInput.update_forward_refs()

