# coding: utf-8

"""
    Neurelo API Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import StrictInt, StrictStr, conint, conlist

from typing import Optional

from neurelo.models.aggregate_by_restaurants200_response import AggregateByRestaurants200Response
from neurelo.models.create_many_restaurants201_response import CreateManyRestaurants201Response
from neurelo.models.create_one_restaurants201_response import CreateOneRestaurants201Response
from neurelo.models.find_restaurants200_response import FindRestaurants200Response
from neurelo.models.group_by_restaurants200_response import GroupByRestaurants200Response
from neurelo.models.restaurants_aggregate_input import RestaurantsAggregateInput
from neurelo.models.restaurants_create_input import RestaurantsCreateInput
from neurelo.models.restaurants_create_many_input import RestaurantsCreateManyInput
from neurelo.models.restaurants_group_by_input import RestaurantsGroupByInput
from neurelo.models.restaurants_order_by_with_aggregation_input import RestaurantsOrderByWithAggregationInput
from neurelo.models.restaurants_order_by_with_relation_input import RestaurantsOrderByWithRelationInput
from neurelo.models.restaurants_scalar_field_enum import RestaurantsScalarFieldEnum
from neurelo.models.restaurants_scalar_where_with_aggregates_input import RestaurantsScalarWhereWithAggregatesInput
from neurelo.models.restaurants_select_input import RestaurantsSelectInput
from neurelo.models.restaurants_update_input import RestaurantsUpdateInput
from neurelo.models.restaurants_update_many_input import RestaurantsUpdateManyInput
from neurelo.models.restaurants_where_input import RestaurantsWhereInput

from neurelo.api_client import ApiClient
from neurelo.api_response import ApiResponse
from neurelo.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RestaurantsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def aggregate_by_restaurants(self, select : RestaurantsAggregateInput, filter : Optional[RestaurantsWhereInput] = None, order_by : Optional[conlist(RestaurantsOrderByWithRelationInput)] = None, skip : Optional[conint(strict=True, ge=0)] = None, take : Optional[StrictInt] = None, **kwargs) -> AggregateByRestaurants200Response:  # noqa: E501
        """aggregate_by_restaurants  # noqa: E501

        Aggregate by restaurants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.aggregate_by_restaurants(select, filter, order_by, skip, take, async_req=True)
        >>> result = thread.get()

        :param select: (required)
        :type select: RestaurantsAggregateInput
        :param filter:
        :type filter: RestaurantsWhereInput
        :param order_by:
        :type order_by: List[RestaurantsOrderByWithRelationInput]
        :param skip:
        :type skip: int
        :param take:
        :type take: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AggregateByRestaurants200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the aggregate_by_restaurants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.aggregate_by_restaurants_with_http_info(select, filter, order_by, skip, take, **kwargs)  # noqa: E501

    @validate_arguments
    def aggregate_by_restaurants_with_http_info(self, select : RestaurantsAggregateInput, filter : Optional[RestaurantsWhereInput] = None, order_by : Optional[conlist(RestaurantsOrderByWithRelationInput)] = None, skip : Optional[conint(strict=True, ge=0)] = None, take : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """aggregate_by_restaurants  # noqa: E501

        Aggregate by restaurants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.aggregate_by_restaurants_with_http_info(select, filter, order_by, skip, take, async_req=True)
        >>> result = thread.get()

        :param select: (required)
        :type select: RestaurantsAggregateInput
        :param filter:
        :type filter: RestaurantsWhereInput
        :param order_by:
        :type order_by: List[RestaurantsOrderByWithRelationInput]
        :param skip:
        :type skip: int
        :param take:
        :type take: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AggregateByRestaurants200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'select',
            'filter',
            'order_by',
            'skip',
            'take'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aggregate_by_restaurants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('order_by', _params['order_by']))
            _collection_formats['order_by'] = 'csv'

        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('take') is not None:  # noqa: E501
            _query_params.append(('take', _params['take']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "AggregateByRestaurants200Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants/__aggregate', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_many_restaurants(self, restaurants_create_many_input : conlist(RestaurantsCreateManyInput, min_items=1), **kwargs) -> CreateManyRestaurants201Response:  # noqa: E501
        """create_many_restaurants  # noqa: E501

        Create multiple restaurants records  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_many_restaurants(restaurants_create_many_input, async_req=True)
        >>> result = thread.get()

        :param restaurants_create_many_input: (required)
        :type restaurants_create_many_input: List[RestaurantsCreateManyInput]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateManyRestaurants201Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_many_restaurants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_many_restaurants_with_http_info(restaurants_create_many_input, **kwargs)  # noqa: E501

    @validate_arguments
    def create_many_restaurants_with_http_info(self, restaurants_create_many_input : conlist(RestaurantsCreateManyInput, min_items=1), **kwargs) -> ApiResponse:  # noqa: E501
        """create_many_restaurants  # noqa: E501

        Create multiple restaurants records  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_many_restaurants_with_http_info(restaurants_create_many_input, async_req=True)
        >>> result = thread.get()

        :param restaurants_create_many_input: (required)
        :type restaurants_create_many_input: List[RestaurantsCreateManyInput]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateManyRestaurants201Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'restaurants_create_many_input'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_many_restaurants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['restaurants_create_many_input'] is not None:
            _body_params = _params['restaurants_create_many_input']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '201': "CreateManyRestaurants201Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_one_restaurants(self, restaurants_create_input : RestaurantsCreateInput, select : Optional[RestaurantsSelectInput] = None, **kwargs) -> CreateOneRestaurants201Response:  # noqa: E501
        """create_one_restaurants  # noqa: E501

        Create one restaurants record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_one_restaurants(restaurants_create_input, select, async_req=True)
        >>> result = thread.get()

        :param restaurants_create_input: (required)
        :type restaurants_create_input: RestaurantsCreateInput
        :param select:
        :type select: RestaurantsSelectInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateOneRestaurants201Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_one_restaurants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_one_restaurants_with_http_info(restaurants_create_input, select, **kwargs)  # noqa: E501

    @validate_arguments
    def create_one_restaurants_with_http_info(self, restaurants_create_input : RestaurantsCreateInput, select : Optional[RestaurantsSelectInput] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create_one_restaurants  # noqa: E501

        Create one restaurants record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_one_restaurants_with_http_info(restaurants_create_input, select, async_req=True)
        >>> result = thread.get()

        :param restaurants_create_input: (required)
        :type restaurants_create_input: RestaurantsCreateInput
        :param select:
        :type select: RestaurantsSelectInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateOneRestaurants201Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'restaurants_create_input',
            'select'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_one_restaurants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['restaurants_create_input'] is not None:
            _body_params = _params['restaurants_create_input']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '201': "CreateOneRestaurants201Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants/__one', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_restaurants(self, filter : Optional[RestaurantsWhereInput] = None, **kwargs) -> CreateManyRestaurants201Response:  # noqa: E501
        """delete_restaurants  # noqa: E501

        Delete multiple restaurants records  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_restaurants(filter, async_req=True)
        >>> result = thread.get()

        :param filter:
        :type filter: RestaurantsWhereInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateManyRestaurants201Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_restaurants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_restaurants_with_http_info(filter, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_restaurants_with_http_info(self, filter : Optional[RestaurantsWhereInput] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """delete_restaurants  # noqa: E501

        Delete multiple restaurants records  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_restaurants_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param filter:
        :type filter: RestaurantsWhereInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateManyRestaurants201Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_restaurants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "CreateManyRestaurants201Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_restaurants_by_name(self, value : StrictStr, select : Optional[RestaurantsSelectInput] = None, **kwargs) -> CreateOneRestaurants201Response:  # noqa: E501
        """delete_restaurants_by_name  # noqa: E501

        Delete one restaurants record by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_restaurants_by_name(value, select, async_req=True)
        >>> result = thread.get()

        :param value: (required)
        :type value: str
        :param select:
        :type select: RestaurantsSelectInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateOneRestaurants201Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_restaurants_by_name_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_restaurants_by_name_with_http_info(value, select, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_restaurants_by_name_with_http_info(self, value : StrictStr, select : Optional[RestaurantsSelectInput] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """delete_restaurants_by_name  # noqa: E501

        Delete one restaurants record by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_restaurants_by_name_with_http_info(value, select, async_req=True)
        >>> result = thread.get()

        :param value: (required)
        :type value: str
        :param select:
        :type select: RestaurantsSelectInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateOneRestaurants201Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'value',
            'select'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_restaurants_by_name" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['value']:
            _path_params['value'] = _params['value']


        # process the query parameters
        _query_params = []
        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "CreateOneRestaurants201Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants/{value}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_restaurants(self, select : Optional[RestaurantsSelectInput] = None, filter : Optional[RestaurantsWhereInput] = None, order_by : Optional[conlist(RestaurantsOrderByWithRelationInput)] = None, skip : Optional[conint(strict=True, ge=0)] = None, take : Optional[StrictInt] = None, **kwargs) -> FindRestaurants200Response:  # noqa: E501
        """find_restaurants  # noqa: E501

        Retrieve multiple restaurants records  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_restaurants(select, filter, order_by, skip, take, async_req=True)
        >>> result = thread.get()

        :param select:
        :type select: RestaurantsSelectInput
        :param filter:
        :type filter: RestaurantsWhereInput
        :param order_by:
        :type order_by: List[RestaurantsOrderByWithRelationInput]
        :param skip:
        :type skip: int
        :param take:
        :type take: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FindRestaurants200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_restaurants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_restaurants_with_http_info(select, filter, order_by, skip, take, **kwargs)  # noqa: E501

    @validate_arguments
    def find_restaurants_with_http_info(self, select : Optional[RestaurantsSelectInput] = None, filter : Optional[RestaurantsWhereInput] = None, order_by : Optional[conlist(RestaurantsOrderByWithRelationInput)] = None, skip : Optional[conint(strict=True, ge=0)] = None, take : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """find_restaurants  # noqa: E501

        Retrieve multiple restaurants records  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_restaurants_with_http_info(select, filter, order_by, skip, take, async_req=True)
        >>> result = thread.get()

        :param select:
        :type select: RestaurantsSelectInput
        :param filter:
        :type filter: RestaurantsWhereInput
        :param order_by:
        :type order_by: List[RestaurantsOrderByWithRelationInput]
        :param skip:
        :type skip: int
        :param take:
        :type take: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FindRestaurants200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'select',
            'filter',
            'order_by',
            'skip',
            'take'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_restaurants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('order_by', _params['order_by']))
            _collection_formats['order_by'] = 'csv'

        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('take') is not None:  # noqa: E501
            _query_params.append(('take', _params['take']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "FindRestaurants200Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_restaurants_by_name(self, value : StrictStr, select : Optional[RestaurantsSelectInput] = None, **kwargs) -> CreateOneRestaurants201Response:  # noqa: E501
        """find_restaurants_by_name  # noqa: E501

        Find one restaurants record by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_restaurants_by_name(value, select, async_req=True)
        >>> result = thread.get()

        :param value: (required)
        :type value: str
        :param select:
        :type select: RestaurantsSelectInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateOneRestaurants201Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_restaurants_by_name_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_restaurants_by_name_with_http_info(value, select, **kwargs)  # noqa: E501

    @validate_arguments
    def find_restaurants_by_name_with_http_info(self, value : StrictStr, select : Optional[RestaurantsSelectInput] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """find_restaurants_by_name  # noqa: E501

        Find one restaurants record by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_restaurants_by_name_with_http_info(value, select, async_req=True)
        >>> result = thread.get()

        :param value: (required)
        :type value: str
        :param select:
        :type select: RestaurantsSelectInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateOneRestaurants201Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'value',
            'select'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_restaurants_by_name" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['value']:
            _path_params['value'] = _params['value']


        # process the query parameters
        _query_params = []
        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "CreateOneRestaurants201Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants/{value}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def group_by_restaurants(self, select : RestaurantsGroupByInput, filter : Optional[RestaurantsWhereInput] = None, order_by : Optional[conlist(RestaurantsOrderByWithAggregationInput)] = None, group_by : Optional[conlist(RestaurantsScalarFieldEnum)] = None, having : Optional[RestaurantsScalarWhereWithAggregatesInput] = None, skip : Optional[conint(strict=True, ge=0)] = None, take : Optional[StrictInt] = None, **kwargs) -> GroupByRestaurants200Response:  # noqa: E501
        """group_by_restaurants  # noqa: E501

        Group by restaurants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.group_by_restaurants(select, filter, order_by, group_by, having, skip, take, async_req=True)
        >>> result = thread.get()

        :param select: (required)
        :type select: RestaurantsGroupByInput
        :param filter:
        :type filter: RestaurantsWhereInput
        :param order_by:
        :type order_by: List[RestaurantsOrderByWithAggregationInput]
        :param group_by:
        :type group_by: List[RestaurantsScalarFieldEnum]
        :param having:
        :type having: RestaurantsScalarWhereWithAggregatesInput
        :param skip:
        :type skip: int
        :param take:
        :type take: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GroupByRestaurants200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the group_by_restaurants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.group_by_restaurants_with_http_info(select, filter, order_by, group_by, having, skip, take, **kwargs)  # noqa: E501

    @validate_arguments
    def group_by_restaurants_with_http_info(self, select : RestaurantsGroupByInput, filter : Optional[RestaurantsWhereInput] = None, order_by : Optional[conlist(RestaurantsOrderByWithAggregationInput)] = None, group_by : Optional[conlist(RestaurantsScalarFieldEnum)] = None, having : Optional[RestaurantsScalarWhereWithAggregatesInput] = None, skip : Optional[conint(strict=True, ge=0)] = None, take : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """group_by_restaurants  # noqa: E501

        Group by restaurants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.group_by_restaurants_with_http_info(select, filter, order_by, group_by, having, skip, take, async_req=True)
        >>> result = thread.get()

        :param select: (required)
        :type select: RestaurantsGroupByInput
        :param filter:
        :type filter: RestaurantsWhereInput
        :param order_by:
        :type order_by: List[RestaurantsOrderByWithAggregationInput]
        :param group_by:
        :type group_by: List[RestaurantsScalarFieldEnum]
        :param having:
        :type having: RestaurantsScalarWhereWithAggregatesInput
        :param skip:
        :type skip: int
        :param take:
        :type take: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GroupByRestaurants200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'select',
            'filter',
            'order_by',
            'group_by',
            'having',
            'skip',
            'take'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_by_restaurants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('order_by', _params['order_by']))
            _collection_formats['order_by'] = 'csv'

        if _params.get('group_by') is not None:  # noqa: E501
            _query_params.append(('group_by', _params['group_by']))
            _collection_formats['group_by'] = 'csv'

        if _params.get('having') is not None:  # noqa: E501
            _query_params.append(('having', _params['having']))

        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('take') is not None:  # noqa: E501
            _query_params.append(('take', _params['take']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "GroupByRestaurants200Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants/__groupBy', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_restaurants(self, restaurants_update_many_input : RestaurantsUpdateManyInput, filter : Optional[RestaurantsWhereInput] = None, **kwargs) -> CreateManyRestaurants201Response:  # noqa: E501
        """update_restaurants  # noqa: E501

        Update multiple restaurants records  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_restaurants(restaurants_update_many_input, filter, async_req=True)
        >>> result = thread.get()

        :param restaurants_update_many_input: (required)
        :type restaurants_update_many_input: RestaurantsUpdateManyInput
        :param filter:
        :type filter: RestaurantsWhereInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateManyRestaurants201Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_restaurants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_restaurants_with_http_info(restaurants_update_many_input, filter, **kwargs)  # noqa: E501

    @validate_arguments
    def update_restaurants_with_http_info(self, restaurants_update_many_input : RestaurantsUpdateManyInput, filter : Optional[RestaurantsWhereInput] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """update_restaurants  # noqa: E501

        Update multiple restaurants records  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_restaurants_with_http_info(restaurants_update_many_input, filter, async_req=True)
        >>> result = thread.get()

        :param restaurants_update_many_input: (required)
        :type restaurants_update_many_input: RestaurantsUpdateManyInput
        :param filter:
        :type filter: RestaurantsWhereInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateManyRestaurants201Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'restaurants_update_many_input',
            'filter'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_restaurants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['restaurants_update_many_input'] is not None:
            _body_params = _params['restaurants_update_many_input']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "CreateManyRestaurants201Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_restaurants_by_name(self, value : StrictStr, restaurants_update_input : RestaurantsUpdateInput, select : Optional[RestaurantsSelectInput] = None, **kwargs) -> CreateOneRestaurants201Response:  # noqa: E501
        """update_restaurants_by_name  # noqa: E501

        Update one restaurants record by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_restaurants_by_name(value, restaurants_update_input, select, async_req=True)
        >>> result = thread.get()

        :param value: (required)
        :type value: str
        :param restaurants_update_input: (required)
        :type restaurants_update_input: RestaurantsUpdateInput
        :param select:
        :type select: RestaurantsSelectInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateOneRestaurants201Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_restaurants_by_name_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_restaurants_by_name_with_http_info(value, restaurants_update_input, select, **kwargs)  # noqa: E501

    @validate_arguments
    def update_restaurants_by_name_with_http_info(self, value : StrictStr, restaurants_update_input : RestaurantsUpdateInput, select : Optional[RestaurantsSelectInput] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """update_restaurants_by_name  # noqa: E501

        Update one restaurants record by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_restaurants_by_name_with_http_info(value, restaurants_update_input, select, async_req=True)
        >>> result = thread.get()

        :param value: (required)
        :type value: str
        :param restaurants_update_input: (required)
        :type restaurants_update_input: RestaurantsUpdateInput
        :param select:
        :type select: RestaurantsSelectInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateOneRestaurants201Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'value',
            'restaurants_update_input',
            'select'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_restaurants_by_name" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['value']:
            _path_params['value'] = _params['value']


        # process the query parameters
        _query_params = []
        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['restaurants_update_input'] is not None:
            _body_params = _params['restaurants_update_input']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "CreateOneRestaurants201Response",
            '400': "FindRestaurants400Response",
            '401': "FindRestaurants400Response",
            '403': "FindRestaurants400Response",
            '404': "FindRestaurants400Response",
            '503': "FindRestaurants400Response",
        }

        return self.api_client.call_api(
            '/rest/restaurants/{value}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
