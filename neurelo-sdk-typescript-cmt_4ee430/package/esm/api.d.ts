/**
 * Neurelo API Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { type Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AffectedRowsOutput
 */
export interface AffectedRowsOutput {
    /**
     *
     * @type {number}
     * @memberof AffectedRowsOutput
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface AggregateByRestaurants200Response
 */
export interface AggregateByRestaurants200Response {
    /**
     *
     * @type {AggregateRestaurants}
     * @memberof AggregateByRestaurants200Response
     */
    'data': AggregateRestaurants;
}
/**
 *
 * @export
 * @interface AggregateRestaurants
 */
export interface AggregateRestaurants {
    /**
     *
     * @type {RestaurantsAvgAggregateOutputType}
     * @memberof AggregateRestaurants
     */
    '_avg'?: RestaurantsAvgAggregateOutputType;
    /**
     *
     * @type {RestaurantsCountAggregateOutputType}
     * @memberof AggregateRestaurants
     */
    '_count'?: RestaurantsCountAggregateOutputType;
    /**
     *
     * @type {RestaurantsMaxAggregateOutputType}
     * @memberof AggregateRestaurants
     */
    '_max'?: RestaurantsMaxAggregateOutputType;
    /**
     *
     * @type {RestaurantsMinAggregateOutputType}
     * @memberof AggregateRestaurants
     */
    '_min'?: RestaurantsMinAggregateOutputType;
    /**
     *
     * @type {RestaurantsSumAggregateOutputType}
     * @memberof AggregateRestaurants
     */
    '_sum'?: RestaurantsSumAggregateOutputType;
}
/**
 *
 * @export
 * @interface CreateManyRestaurants201Response
 */
export interface CreateManyRestaurants201Response {
    /**
     *
     * @type {AffectedRowsOutput}
     * @memberof CreateManyRestaurants201Response
     */
    'data': AffectedRowsOutput;
}
/**
 *
 * @export
 * @interface CreateOneRestaurants201Response
 */
export interface CreateOneRestaurants201Response {
    /**
     *
     * @type {Restaurants}
     * @memberof CreateOneRestaurants201Response
     */
    'data': Restaurants;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {object}
     * @memberof ErrorResponse
     */
    'details'?: object;
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
}
/**
 *
 * @export
 * @interface FindRestaurants200Response
 */
export interface FindRestaurants200Response {
    /**
     *
     * @type {Array<Restaurants>}
     * @memberof FindRestaurants200Response
     */
    'data': Array<Restaurants>;
}
/**
 *
 * @export
 * @interface FindRestaurants400Response
 */
export interface FindRestaurants400Response {
    /**
     *
     * @type {Array<ErrorResponse>}
     * @memberof FindRestaurants400Response
     */
    'errors': Array<ErrorResponse>;
}
/**
 *
 * @export
 * @interface FloatFieldUpdateOperationsInput
 */
export interface FloatFieldUpdateOperationsInput {
    /**
     *
     * @type {number}
     * @memberof FloatFieldUpdateOperationsInput
     */
    'decrement'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatFieldUpdateOperationsInput
     */
    'divide'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatFieldUpdateOperationsInput
     */
    'increment'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatFieldUpdateOperationsInput
     */
    'multiply'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatFieldUpdateOperationsInput
     */
    'set'?: number;
}
/**
 *
 * @export
 * @interface FloatFilter
 */
export interface FloatFilter {
    /**
     *
     * @type {number}
     * @memberof FloatFilter
     */
    'eq'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatFilter
     */
    'equals'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof FloatFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof FloatFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatFilter
     */
    'lte'?: number;
    /**
     *
     * @type {FloatFilterNot}
     * @memberof FloatFilter
     */
    'not'?: FloatFilterNot;
    /**
     *
     * @type {Array<number>}
     * @memberof FloatFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type FloatFilterNot
 * @export
 */
export type FloatFilterNot = NestedFloatFilter | number;
/**
 *
 * @export
 * @interface FloatWithAggregatesFilter
 */
export interface FloatWithAggregatesFilter {
    /**
     *
     * @type {NestedFloatFilter}
     * @memberof FloatWithAggregatesFilter
     */
    '_avg'?: NestedFloatFilter;
    /**
     *
     * @type {NestedIntFilter}
     * @memberof FloatWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedFloatFilter}
     * @memberof FloatWithAggregatesFilter
     */
    '_max'?: NestedFloatFilter;
    /**
     *
     * @type {NestedFloatFilter}
     * @memberof FloatWithAggregatesFilter
     */
    '_min'?: NestedFloatFilter;
    /**
     *
     * @type {NestedFloatFilter}
     * @memberof FloatWithAggregatesFilter
     */
    '_sum'?: NestedFloatFilter;
    /**
     *
     * @type {number}
     * @memberof FloatWithAggregatesFilter
     */
    'eq'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatWithAggregatesFilter
     */
    'equals'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatWithAggregatesFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatWithAggregatesFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof FloatWithAggregatesFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof FloatWithAggregatesFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof FloatWithAggregatesFilter
     */
    'lte'?: number;
    /**
     *
     * @type {FloatWithAggregatesFilterNot}
     * @memberof FloatWithAggregatesFilter
     */
    'not'?: FloatWithAggregatesFilterNot;
    /**
     *
     * @type {Array<number>}
     * @memberof FloatWithAggregatesFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type FloatWithAggregatesFilterNot
 * @export
 */
export type FloatWithAggregatesFilterNot = NestedFloatWithAggregatesFilter | number;
/**
 *
 * @export
 * @interface GroupByRestaurants200Response
 */
export interface GroupByRestaurants200Response {
    /**
     *
     * @type {Array<RestaurantsGroupByOutputType>}
     * @memberof GroupByRestaurants200Response
     */
    'data': Array<RestaurantsGroupByOutputType>;
}
/**
 *
 * @export
 * @interface NestedFloatFilter
 */
export interface NestedFloatFilter {
    /**
     *
     * @type {number}
     * @memberof NestedFloatFilter
     */
    'eq'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatFilter
     */
    'equals'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedFloatFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof NestedFloatFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatFilter
     */
    'lte'?: number;
    /**
     *
     * @type {FloatFilterNot}
     * @memberof NestedFloatFilter
     */
    'not'?: FloatFilterNot;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedFloatFilter
     */
    'notIn'?: Array<number>;
}
/**
 *
 * @export
 * @interface NestedFloatWithAggregatesFilter
 */
export interface NestedFloatWithAggregatesFilter {
    /**
     *
     * @type {NestedFloatFilter}
     * @memberof NestedFloatWithAggregatesFilter
     */
    '_avg'?: NestedFloatFilter;
    /**
     *
     * @type {NestedIntFilter}
     * @memberof NestedFloatWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedFloatFilter}
     * @memberof NestedFloatWithAggregatesFilter
     */
    '_max'?: NestedFloatFilter;
    /**
     *
     * @type {NestedFloatFilter}
     * @memberof NestedFloatWithAggregatesFilter
     */
    '_min'?: NestedFloatFilter;
    /**
     *
     * @type {NestedFloatFilter}
     * @memberof NestedFloatWithAggregatesFilter
     */
    '_sum'?: NestedFloatFilter;
    /**
     *
     * @type {number}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'eq'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'equals'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'lte'?: number;
    /**
     *
     * @type {FloatWithAggregatesFilterNot}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'not'?: FloatWithAggregatesFilterNot;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedFloatWithAggregatesFilter
     */
    'notIn'?: Array<number>;
}
/**
 *
 * @export
 * @interface NestedIntFilter
 */
export interface NestedIntFilter {
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'eq'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'equals'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'lte'?: number;
    /**
     *
     * @type {NestedIntFilterNot}
     * @memberof NestedIntFilter
     */
    'not'?: NestedIntFilterNot;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type NestedIntFilterNot
 * @export
 */
export type NestedIntFilterNot = NestedIntFilter | number;
/**
 *
 * @export
 * @interface NestedStringFilter
 */
export interface NestedStringFilter {
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringFilterNot}
     * @memberof NestedStringFilter
     */
    'not'?: NestedStringFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringFilterNot
 * @export
 */
export type NestedStringFilterNot = NestedStringFilter | string;
/**
 *
 * @export
 * @interface NestedStringWithAggregatesFilter
 */
export interface NestedStringWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_max'?: NestedStringFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_min'?: NestedStringFilter;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringWithAggregatesFilterNot}
     * @memberof NestedStringWithAggregatesFilter
     */
    'not'?: NestedStringWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringWithAggregatesFilterNot
 * @export
 */
export type NestedStringWithAggregatesFilterNot = NestedStringWithAggregatesFilter | string;
/**
 *
 * @export
 * @enum {string}
 */
export declare const QueryMode: {
    readonly Default: "default";
    readonly Insensitive: "insensitive";
};
export type QueryMode = typeof QueryMode[keyof typeof QueryMode];
/**
 *
 * @export
 * @interface Restaurants
 */
export interface Restaurants {
    /**
     *
     * @type {string}
     * @memberof Restaurants
     */
    'About'?: string;
    /**
     *
     * @type {string}
     * @memberof Restaurants
     */
    'Name'?: string;
    /**
     *
     * @type {number}
     * @memberof Restaurants
     */
    'Rating'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof Restaurants
     */
    'Reviews'?: Array<string>;
}
/**
 *
 * @export
 * @interface RestaurantsAggregateInput
 */
export interface RestaurantsAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsAggregateInput
     */
    '_avg'?: Array<RestaurantsAggregateInputAvgEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsAggregateInput
     */
    '_count'?: Array<RestaurantsAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsAggregateInput
     */
    '_max'?: Array<RestaurantsAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsAggregateInput
     */
    '_min'?: Array<RestaurantsAggregateInputMinEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsAggregateInput
     */
    '_sum'?: Array<RestaurantsAggregateInputSumEnum>;
}
export declare const RestaurantsAggregateInputAvgEnum: {
    readonly Rating: "Rating";
};
export type RestaurantsAggregateInputAvgEnum = typeof RestaurantsAggregateInputAvgEnum[keyof typeof RestaurantsAggregateInputAvgEnum];
export declare const RestaurantsAggregateInputCountEnum: {
    readonly All: "_all";
    readonly About: "About";
    readonly Name: "Name";
    readonly Rating: "Rating";
    readonly Reviews: "Reviews";
};
export type RestaurantsAggregateInputCountEnum = typeof RestaurantsAggregateInputCountEnum[keyof typeof RestaurantsAggregateInputCountEnum];
export declare const RestaurantsAggregateInputMaxEnum: {
    readonly About: "About";
    readonly Name: "Name";
    readonly Rating: "Rating";
    readonly Reviews: "Reviews";
};
export type RestaurantsAggregateInputMaxEnum = typeof RestaurantsAggregateInputMaxEnum[keyof typeof RestaurantsAggregateInputMaxEnum];
export declare const RestaurantsAggregateInputMinEnum: {
    readonly About: "About";
    readonly Name: "Name";
    readonly Rating: "Rating";
    readonly Reviews: "Reviews";
};
export type RestaurantsAggregateInputMinEnum = typeof RestaurantsAggregateInputMinEnum[keyof typeof RestaurantsAggregateInputMinEnum];
export declare const RestaurantsAggregateInputSumEnum: {
    readonly Rating: "Rating";
};
export type RestaurantsAggregateInputSumEnum = typeof RestaurantsAggregateInputSumEnum[keyof typeof RestaurantsAggregateInputSumEnum];
/**
 *
 * @export
 * @interface RestaurantsAvgAggregateOutputType
 */
export interface RestaurantsAvgAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof RestaurantsAvgAggregateOutputType
     */
    'Rating'?: number | null;
}
/**
 *
 * @export
 * @interface RestaurantsAvgOrderByAggregateInput
 */
export interface RestaurantsAvgOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsAvgOrderByAggregateInput
     */
    'Rating'?: SortOrder;
}
/**
 *
 * @export
 * @interface RestaurantsCountAggregateOutputType
 */
export interface RestaurantsCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof RestaurantsCountAggregateOutputType
     */
    'About'?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantsCountAggregateOutputType
     */
    'Name'?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantsCountAggregateOutputType
     */
    'Rating'?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantsCountAggregateOutputType
     */
    'Reviews'?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantsCountAggregateOutputType
     */
    '_all'?: number;
}
/**
 *
 * @export
 * @interface RestaurantsCountOrderByAggregateInput
 */
export interface RestaurantsCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsCountOrderByAggregateInput
     */
    'About'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsCountOrderByAggregateInput
     */
    'Name'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsCountOrderByAggregateInput
     */
    'Rating'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsCountOrderByAggregateInput
     */
    'Reviews'?: SortOrder;
}
/**
 *
 * @export
 * @interface RestaurantsCreateInput
 */
export interface RestaurantsCreateInput {
    /**
     *
     * @type {string}
     * @memberof RestaurantsCreateInput
     */
    'About': string;
    /**
     *
     * @type {string}
     * @memberof RestaurantsCreateInput
     */
    'Name': string;
    /**
     *
     * @type {number}
     * @memberof RestaurantsCreateInput
     */
    'Rating': number;
    /**
     *
     * @type {RestaurantsCreateInputReviews}
     * @memberof RestaurantsCreateInput
     */
    'Reviews'?: RestaurantsCreateInputReviews;
}
/**
 * @type RestaurantsCreateInputReviews
 * @export
 */
export type RestaurantsCreateInputReviews = Array<string> | RestaurantsCreateReviewsInput;
/**
 *
 * @export
 * @interface RestaurantsCreateManyInput
 */
export interface RestaurantsCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof RestaurantsCreateManyInput
     */
    'About': string;
    /**
     *
     * @type {string}
     * @memberof RestaurantsCreateManyInput
     */
    'Name': string;
    /**
     *
     * @type {number}
     * @memberof RestaurantsCreateManyInput
     */
    'Rating': number;
    /**
     *
     * @type {RestaurantsCreateInputReviews}
     * @memberof RestaurantsCreateManyInput
     */
    'Reviews'?: RestaurantsCreateInputReviews;
}
/**
 *
 * @export
 * @interface RestaurantsCreateReviewsInput
 */
export interface RestaurantsCreateReviewsInput {
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsCreateReviewsInput
     */
    'set': Array<string>;
}
/**
 *
 * @export
 * @interface RestaurantsGroupByInput
 */
export interface RestaurantsGroupByInput {
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsGroupByInput
     */
    'About'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsGroupByInput
     */
    'Name'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsGroupByInput
     */
    'Rating'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsGroupByInput
     */
    'Reviews'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsGroupByInput
     */
    '_avg'?: Array<RestaurantsGroupByInputAvgEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsGroupByInput
     */
    '_count'?: Array<RestaurantsGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsGroupByInput
     */
    '_max'?: Array<RestaurantsGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsGroupByInput
     */
    '_min'?: Array<RestaurantsGroupByInputMinEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsGroupByInput
     */
    '_sum'?: Array<RestaurantsGroupByInputSumEnum>;
}
export declare const RestaurantsGroupByInputAvgEnum: {
    readonly Rating: "Rating";
};
export type RestaurantsGroupByInputAvgEnum = typeof RestaurantsGroupByInputAvgEnum[keyof typeof RestaurantsGroupByInputAvgEnum];
export declare const RestaurantsGroupByInputCountEnum: {
    readonly All: "_all";
    readonly About: "About";
    readonly Name: "Name";
    readonly Rating: "Rating";
    readonly Reviews: "Reviews";
};
export type RestaurantsGroupByInputCountEnum = typeof RestaurantsGroupByInputCountEnum[keyof typeof RestaurantsGroupByInputCountEnum];
export declare const RestaurantsGroupByInputMaxEnum: {
    readonly About: "About";
    readonly Name: "Name";
    readonly Rating: "Rating";
    readonly Reviews: "Reviews";
};
export type RestaurantsGroupByInputMaxEnum = typeof RestaurantsGroupByInputMaxEnum[keyof typeof RestaurantsGroupByInputMaxEnum];
export declare const RestaurantsGroupByInputMinEnum: {
    readonly About: "About";
    readonly Name: "Name";
    readonly Rating: "Rating";
    readonly Reviews: "Reviews";
};
export type RestaurantsGroupByInputMinEnum = typeof RestaurantsGroupByInputMinEnum[keyof typeof RestaurantsGroupByInputMinEnum];
export declare const RestaurantsGroupByInputSumEnum: {
    readonly Rating: "Rating";
};
export type RestaurantsGroupByInputSumEnum = typeof RestaurantsGroupByInputSumEnum[keyof typeof RestaurantsGroupByInputSumEnum];
/**
 *
 * @export
 * @interface RestaurantsGroupByOutputType
 */
export interface RestaurantsGroupByOutputType {
    /**
     *
     * @type {string}
     * @memberof RestaurantsGroupByOutputType
     */
    'About'?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantsGroupByOutputType
     */
    'Name'?: string;
    /**
     *
     * @type {number}
     * @memberof RestaurantsGroupByOutputType
     */
    'Rating'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsGroupByOutputType
     */
    'Reviews'?: Array<string>;
    /**
     *
     * @type {RestaurantsAvgAggregateOutputType}
     * @memberof RestaurantsGroupByOutputType
     */
    '_avg'?: RestaurantsAvgAggregateOutputType;
    /**
     *
     * @type {RestaurantsCountAggregateOutputType}
     * @memberof RestaurantsGroupByOutputType
     */
    '_count'?: RestaurantsCountAggregateOutputType;
    /**
     *
     * @type {RestaurantsMaxAggregateOutputType}
     * @memberof RestaurantsGroupByOutputType
     */
    '_max'?: RestaurantsMaxAggregateOutputType;
    /**
     *
     * @type {RestaurantsMinAggregateOutputType}
     * @memberof RestaurantsGroupByOutputType
     */
    '_min'?: RestaurantsMinAggregateOutputType;
    /**
     *
     * @type {RestaurantsSumAggregateOutputType}
     * @memberof RestaurantsGroupByOutputType
     */
    '_sum'?: RestaurantsSumAggregateOutputType;
}
/**
 *
 * @export
 * @interface RestaurantsMaxAggregateOutputType
 */
export interface RestaurantsMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof RestaurantsMaxAggregateOutputType
     */
    'About'?: string | null;
    /**
     *
     * @type {string}
     * @memberof RestaurantsMaxAggregateOutputType
     */
    'Name'?: string | null;
    /**
     *
     * @type {number}
     * @memberof RestaurantsMaxAggregateOutputType
     */
    'Rating'?: number | null;
}
/**
 *
 * @export
 * @interface RestaurantsMaxOrderByAggregateInput
 */
export interface RestaurantsMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsMaxOrderByAggregateInput
     */
    'About'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsMaxOrderByAggregateInput
     */
    'Name'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsMaxOrderByAggregateInput
     */
    'Rating'?: SortOrder;
}
/**
 *
 * @export
 * @interface RestaurantsMinAggregateOutputType
 */
export interface RestaurantsMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof RestaurantsMinAggregateOutputType
     */
    'About'?: string | null;
    /**
     *
     * @type {string}
     * @memberof RestaurantsMinAggregateOutputType
     */
    'Name'?: string | null;
    /**
     *
     * @type {number}
     * @memberof RestaurantsMinAggregateOutputType
     */
    'Rating'?: number | null;
}
/**
 *
 * @export
 * @interface RestaurantsMinOrderByAggregateInput
 */
export interface RestaurantsMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsMinOrderByAggregateInput
     */
    'About'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsMinOrderByAggregateInput
     */
    'Name'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsMinOrderByAggregateInput
     */
    'Rating'?: SortOrder;
}
/**
 *
 * @export
 * @interface RestaurantsOrderByWithAggregationInput
 */
export interface RestaurantsOrderByWithAggregationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    'About'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    'Name'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    'Rating'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    'Reviews'?: SortOrder;
    /**
     *
     * @type {RestaurantsAvgOrderByAggregateInput}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    '_avg'?: RestaurantsAvgOrderByAggregateInput;
    /**
     *
     * @type {RestaurantsCountOrderByAggregateInput}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    '_count'?: RestaurantsCountOrderByAggregateInput;
    /**
     *
     * @type {RestaurantsMaxOrderByAggregateInput}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    '_max'?: RestaurantsMaxOrderByAggregateInput;
    /**
     *
     * @type {RestaurantsMinOrderByAggregateInput}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    '_min'?: RestaurantsMinOrderByAggregateInput;
    /**
     *
     * @type {RestaurantsSumOrderByAggregateInput}
     * @memberof RestaurantsOrderByWithAggregationInput
     */
    '_sum'?: RestaurantsSumOrderByAggregateInput;
}
/**
 *
 * @export
 * @interface RestaurantsOrderByWithRelationInput
 */
export interface RestaurantsOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsOrderByWithRelationInput
     */
    'About'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsOrderByWithRelationInput
     */
    'Name'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsOrderByWithRelationInput
     */
    'Rating'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsOrderByWithRelationInput
     */
    'Reviews'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const RestaurantsScalarFieldEnum: {
    readonly About: "About";
    readonly Name: "Name";
    readonly Rating: "Rating";
    readonly Reviews: "Reviews";
};
export type RestaurantsScalarFieldEnum = typeof RestaurantsScalarFieldEnum[keyof typeof RestaurantsScalarFieldEnum];
/**
 *
 * @export
 * @interface RestaurantsScalarWhereWithAggregatesInput
 */
export interface RestaurantsScalarWhereWithAggregatesInput {
    /**
     *
     * @type {RestaurantsScalarWhereWithAggregatesInputAND}
     * @memberof RestaurantsScalarWhereWithAggregatesInput
     */
    'AND'?: RestaurantsScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {RestaurantsScalarWhereWithAggregatesInputAbout}
     * @memberof RestaurantsScalarWhereWithAggregatesInput
     */
    'About'?: RestaurantsScalarWhereWithAggregatesInputAbout;
    /**
     *
     * @type {RestaurantsScalarWhereWithAggregatesInputAND}
     * @memberof RestaurantsScalarWhereWithAggregatesInput
     */
    'NOT'?: RestaurantsScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {RestaurantsScalarWhereWithAggregatesInputAbout}
     * @memberof RestaurantsScalarWhereWithAggregatesInput
     */
    'Name'?: RestaurantsScalarWhereWithAggregatesInputAbout;
    /**
     *
     * @type {Array<RestaurantsScalarWhereWithAggregatesInput>}
     * @memberof RestaurantsScalarWhereWithAggregatesInput
     */
    'OR'?: Array<RestaurantsScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {RestaurantsScalarWhereWithAggregatesInputRating}
     * @memberof RestaurantsScalarWhereWithAggregatesInput
     */
    'Rating'?: RestaurantsScalarWhereWithAggregatesInputRating;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof RestaurantsScalarWhereWithAggregatesInput
     */
    'Reviews'?: StringNullableListFilter;
}
/**
 * @type RestaurantsScalarWhereWithAggregatesInputAND
 * @export
 */
export type RestaurantsScalarWhereWithAggregatesInputAND = Array<RestaurantsScalarWhereWithAggregatesInput> | RestaurantsScalarWhereWithAggregatesInput;
/**
 * @type RestaurantsScalarWhereWithAggregatesInputAbout
 * @export
 */
export type RestaurantsScalarWhereWithAggregatesInputAbout = StringWithAggregatesFilter | string;
/**
 * @type RestaurantsScalarWhereWithAggregatesInputRating
 * @export
 */
export type RestaurantsScalarWhereWithAggregatesInputRating = FloatWithAggregatesFilter | number;
/**
 *
 * @export
 * @interface RestaurantsSelectInput
 */
export interface RestaurantsSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsSelectInput
     */
    'About'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsSelectInput
     */
    'Name'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsSelectInput
     */
    'Rating'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantsSelectInput
     */
    'Reviews'?: boolean;
}
/**
 *
 * @export
 * @interface RestaurantsSumAggregateOutputType
 */
export interface RestaurantsSumAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof RestaurantsSumAggregateOutputType
     */
    'Rating'?: number | null;
}
/**
 *
 * @export
 * @interface RestaurantsSumOrderByAggregateInput
 */
export interface RestaurantsSumOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof RestaurantsSumOrderByAggregateInput
     */
    'Rating'?: SortOrder;
}
/**
 *
 * @export
 * @interface RestaurantsUpdateInput
 */
export interface RestaurantsUpdateInput {
    /**
     *
     * @type {RestaurantsUpdateInputAbout}
     * @memberof RestaurantsUpdateInput
     */
    'About'?: RestaurantsUpdateInputAbout;
    /**
     *
     * @type {RestaurantsUpdateInputRating}
     * @memberof RestaurantsUpdateInput
     */
    'Rating'?: RestaurantsUpdateInputRating;
    /**
     *
     * @type {RestaurantsUpdateInputReviews}
     * @memberof RestaurantsUpdateInput
     */
    'Reviews'?: RestaurantsUpdateInputReviews;
}
/**
 * @type RestaurantsUpdateInputAbout
 * @export
 */
export type RestaurantsUpdateInputAbout = StringFieldUpdateOperationsInput | string;
/**
 * @type RestaurantsUpdateInputRating
 * @export
 */
export type RestaurantsUpdateInputRating = FloatFieldUpdateOperationsInput | number;
/**
 * @type RestaurantsUpdateInputReviews
 * @export
 */
export type RestaurantsUpdateInputReviews = Array<string> | RestaurantsUpdateReviewsInput;
/**
 *
 * @export
 * @interface RestaurantsUpdateManyInput
 */
export interface RestaurantsUpdateManyInput {
    /**
     *
     * @type {RestaurantsUpdateInputAbout}
     * @memberof RestaurantsUpdateManyInput
     */
    'About'?: RestaurantsUpdateInputAbout;
    /**
     *
     * @type {RestaurantsUpdateInputRating}
     * @memberof RestaurantsUpdateManyInput
     */
    'Rating'?: RestaurantsUpdateInputRating;
    /**
     *
     * @type {RestaurantsUpdateInputReviews}
     * @memberof RestaurantsUpdateManyInput
     */
    'Reviews'?: RestaurantsUpdateInputReviews;
}
/**
 *
 * @export
 * @interface RestaurantsUpdateReviewsInput
 */
export interface RestaurantsUpdateReviewsInput {
    /**
     *
     * @type {RestaurantsUpdateReviewsInputPush}
     * @memberof RestaurantsUpdateReviewsInput
     */
    'push'?: RestaurantsUpdateReviewsInputPush;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantsUpdateReviewsInput
     */
    'set'?: Array<string>;
}
/**
 * @type RestaurantsUpdateReviewsInputPush
 * @export
 */
export type RestaurantsUpdateReviewsInputPush = Array<string> | string;
/**
 *
 * @export
 * @interface RestaurantsWhereInput
 */
export interface RestaurantsWhereInput {
    /**
     *
     * @type {RestaurantsWhereInputAND}
     * @memberof RestaurantsWhereInput
     */
    'AND'?: RestaurantsWhereInputAND;
    /**
     *
     * @type {RestaurantsWhereInputAbout}
     * @memberof RestaurantsWhereInput
     */
    'About'?: RestaurantsWhereInputAbout;
    /**
     *
     * @type {RestaurantsWhereInputAND}
     * @memberof RestaurantsWhereInput
     */
    'NOT'?: RestaurantsWhereInputAND;
    /**
     *
     * @type {RestaurantsWhereInputAbout}
     * @memberof RestaurantsWhereInput
     */
    'Name'?: RestaurantsWhereInputAbout;
    /**
     *
     * @type {Array<RestaurantsWhereInput>}
     * @memberof RestaurantsWhereInput
     */
    'OR'?: Array<RestaurantsWhereInput>;
    /**
     *
     * @type {RestaurantsWhereInputRating}
     * @memberof RestaurantsWhereInput
     */
    'Rating'?: RestaurantsWhereInputRating;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof RestaurantsWhereInput
     */
    'Reviews'?: StringNullableListFilter;
}
/**
 * @type RestaurantsWhereInputAND
 * @export
 */
export type RestaurantsWhereInputAND = Array<RestaurantsWhereInput> | RestaurantsWhereInput;
/**
 * @type RestaurantsWhereInputAbout
 * @export
 */
export type RestaurantsWhereInputAbout = StringFilter | string;
/**
 * @type RestaurantsWhereInputRating
 * @export
 */
export type RestaurantsWhereInputRating = FloatFilter | number;
/**
 *
 * @export
 * @interface RestaurantsWhereUniqueInput
 */
export interface RestaurantsWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof RestaurantsWhereUniqueInput
     */
    'Name'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const SortOrder: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SortOrder = typeof SortOrder[keyof typeof SortOrder];
/**
 *
 * @export
 * @interface StringFieldUpdateOperationsInput
 */
export interface StringFieldUpdateOperationsInput {
    /**
     *
     * @type {string}
     * @memberof StringFieldUpdateOperationsInput
     */
    'set'?: string;
}
/**
 *
 * @export
 * @interface StringFilter
 */
export interface StringFilter {
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringFilterNot}
     * @memberof StringFilter
     */
    'not'?: NestedStringFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof StringFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface StringNullableListFilter
 */
export interface StringNullableListFilter {
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'eq'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'equals'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringNullableListFilter
     */
    'has'?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'hasEvery'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'hasSome'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof StringNullableListFilter
     */
    'isEmpty'?: boolean;
}
/**
 *
 * @export
 * @interface StringWithAggregatesFilter
 */
export interface StringWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_max'?: NestedStringFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_min'?: NestedStringFilter;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringWithAggregatesFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringWithAggregatesFilterNot}
     * @memberof StringWithAggregatesFilter
     */
    'not'?: NestedStringWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof StringWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 * RestaurantsApi - axios parameter creator
 * @export
 */
export declare const RestaurantsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by restaurants
     * @param {RestaurantsAggregateInput} select
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByRestaurants: (select: RestaurantsAggregateInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple restaurants records
     * @param {Array<RestaurantsCreateManyInput>} restaurantsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyRestaurants: (restaurantsCreateManyInput: Array<RestaurantsCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one restaurants record
     * @param {RestaurantsCreateInput} restaurantsCreateInput
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneRestaurants: (restaurantsCreateInput: RestaurantsCreateInput, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple restaurants records
     * @param {RestaurantsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRestaurants: (filter?: RestaurantsWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRestaurantsByName: (value: string, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple restaurants records
     * @param {RestaurantsSelectInput} [select]
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRestaurants: (select?: RestaurantsSelectInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRestaurantsByName: (value: string, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by restaurants
     * @param {RestaurantsGroupByInput} select
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<RestaurantsScalarFieldEnum>} [groupBy]
     * @param {RestaurantsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByRestaurants: (select: RestaurantsGroupByInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithAggregationInput>, groupBy?: Array<RestaurantsScalarFieldEnum>, having?: RestaurantsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple restaurants records
     * @param {RestaurantsUpdateManyInput} restaurantsUpdateManyInput
     * @param {RestaurantsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRestaurants: (restaurantsUpdateManyInput: RestaurantsUpdateManyInput, filter?: RestaurantsWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsUpdateInput} restaurantsUpdateInput
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRestaurantsByName: (value: string, restaurantsUpdateInput: RestaurantsUpdateInput, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RestaurantsApi - functional programming interface
 * @export
 */
export declare const RestaurantsApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by restaurants
     * @param {RestaurantsAggregateInput} select
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByRestaurants(select: RestaurantsAggregateInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByRestaurants200Response>>;
    /**
     * Create multiple restaurants records
     * @param {Array<RestaurantsCreateManyInput>} restaurantsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyRestaurants(restaurantsCreateManyInput: Array<RestaurantsCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyRestaurants201Response>>;
    /**
     * Create one restaurants record
     * @param {RestaurantsCreateInput} restaurantsCreateInput
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneRestaurants(restaurantsCreateInput: RestaurantsCreateInput, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneRestaurants201Response>>;
    /**
     * Delete multiple restaurants records
     * @param {RestaurantsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRestaurants(filter?: RestaurantsWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyRestaurants201Response>>;
    /**
     * Delete one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRestaurantsByName(value: string, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneRestaurants201Response>>;
    /**
     * Retrieve multiple restaurants records
     * @param {RestaurantsSelectInput} [select]
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRestaurants(select?: RestaurantsSelectInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindRestaurants200Response>>;
    /**
     * Find one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRestaurantsByName(value: string, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneRestaurants201Response>>;
    /**
     * Group by restaurants
     * @param {RestaurantsGroupByInput} select
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<RestaurantsScalarFieldEnum>} [groupBy]
     * @param {RestaurantsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByRestaurants(select: RestaurantsGroupByInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithAggregationInput>, groupBy?: Array<RestaurantsScalarFieldEnum>, having?: RestaurantsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByRestaurants200Response>>;
    /**
     * Update multiple restaurants records
     * @param {RestaurantsUpdateManyInput} restaurantsUpdateManyInput
     * @param {RestaurantsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRestaurants(restaurantsUpdateManyInput: RestaurantsUpdateManyInput, filter?: RestaurantsWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyRestaurants201Response>>;
    /**
     * Update one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsUpdateInput} restaurantsUpdateInput
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRestaurantsByName(value: string, restaurantsUpdateInput: RestaurantsUpdateInput, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneRestaurants201Response>>;
};
/**
 * RestaurantsApi - factory interface
 * @export
 */
export declare const RestaurantsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by restaurants
     * @param {RestaurantsAggregateInput} select
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByRestaurants(select: RestaurantsAggregateInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByRestaurants200Response>;
    /**
     * Create multiple restaurants records
     * @param {Array<RestaurantsCreateManyInput>} restaurantsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyRestaurants(restaurantsCreateManyInput: Array<RestaurantsCreateManyInput>, options?: any): AxiosPromise<CreateManyRestaurants201Response>;
    /**
     * Create one restaurants record
     * @param {RestaurantsCreateInput} restaurantsCreateInput
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneRestaurants(restaurantsCreateInput: RestaurantsCreateInput, select?: RestaurantsSelectInput, options?: any): AxiosPromise<CreateOneRestaurants201Response>;
    /**
     * Delete multiple restaurants records
     * @param {RestaurantsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRestaurants(filter?: RestaurantsWhereInput, options?: any): AxiosPromise<CreateManyRestaurants201Response>;
    /**
     * Delete one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRestaurantsByName(value: string, select?: RestaurantsSelectInput, options?: any): AxiosPromise<CreateOneRestaurants201Response>;
    /**
     * Retrieve multiple restaurants records
     * @param {RestaurantsSelectInput} [select]
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRestaurants(select?: RestaurantsSelectInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindRestaurants200Response>;
    /**
     * Find one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRestaurantsByName(value: string, select?: RestaurantsSelectInput, options?: any): AxiosPromise<CreateOneRestaurants201Response>;
    /**
     * Group by restaurants
     * @param {RestaurantsGroupByInput} select
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<RestaurantsScalarFieldEnum>} [groupBy]
     * @param {RestaurantsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByRestaurants(select: RestaurantsGroupByInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithAggregationInput>, groupBy?: Array<RestaurantsScalarFieldEnum>, having?: RestaurantsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByRestaurants200Response>;
    /**
     * Update multiple restaurants records
     * @param {RestaurantsUpdateManyInput} restaurantsUpdateManyInput
     * @param {RestaurantsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRestaurants(restaurantsUpdateManyInput: RestaurantsUpdateManyInput, filter?: RestaurantsWhereInput, options?: any): AxiosPromise<CreateManyRestaurants201Response>;
    /**
     * Update one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsUpdateInput} restaurantsUpdateInput
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRestaurantsByName(value: string, restaurantsUpdateInput: RestaurantsUpdateInput, select?: RestaurantsSelectInput, options?: any): AxiosPromise<CreateOneRestaurants201Response>;
};
/**
 * RestaurantsApi - object-oriented interface
 * @export
 * @class RestaurantsApi
 * @extends {BaseAPI}
 */
export declare class RestaurantsApi extends BaseAPI {
    /**
     * Aggregate by restaurants
     * @param {RestaurantsAggregateInput} select
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    aggregateByRestaurants(select: RestaurantsAggregateInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByRestaurants200Response, any>>;
    /**
     * Create multiple restaurants records
     * @param {Array<RestaurantsCreateManyInput>} restaurantsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    createManyRestaurants(restaurantsCreateManyInput: Array<RestaurantsCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyRestaurants201Response, any>>;
    /**
     * Create one restaurants record
     * @param {RestaurantsCreateInput} restaurantsCreateInput
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    createOneRestaurants(restaurantsCreateInput: RestaurantsCreateInput, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneRestaurants201Response, any>>;
    /**
     * Delete multiple restaurants records
     * @param {RestaurantsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    deleteRestaurants(filter?: RestaurantsWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyRestaurants201Response, any>>;
    /**
     * Delete one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    deleteRestaurantsByName(value: string, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneRestaurants201Response, any>>;
    /**
     * Retrieve multiple restaurants records
     * @param {RestaurantsSelectInput} [select]
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    findRestaurants(select?: RestaurantsSelectInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindRestaurants200Response, any>>;
    /**
     * Find one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    findRestaurantsByName(value: string, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneRestaurants201Response, any>>;
    /**
     * Group by restaurants
     * @param {RestaurantsGroupByInput} select
     * @param {RestaurantsWhereInput} [filter]
     * @param {Array<RestaurantsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<RestaurantsScalarFieldEnum>} [groupBy]
     * @param {RestaurantsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    groupByRestaurants(select: RestaurantsGroupByInput, filter?: RestaurantsWhereInput, orderBy?: Array<RestaurantsOrderByWithAggregationInput>, groupBy?: Array<RestaurantsScalarFieldEnum>, having?: RestaurantsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByRestaurants200Response, any>>;
    /**
     * Update multiple restaurants records
     * @param {RestaurantsUpdateManyInput} restaurantsUpdateManyInput
     * @param {RestaurantsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    updateRestaurants(restaurantsUpdateManyInput: RestaurantsUpdateManyInput, filter?: RestaurantsWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyRestaurants201Response, any>>;
    /**
     * Update one restaurants record by Name
     * @param {string} value
     * @param {RestaurantsUpdateInput} restaurantsUpdateInput
     * @param {RestaurantsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    updateRestaurantsByName(value: string, restaurantsUpdateInput: RestaurantsUpdateInput, select?: RestaurantsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneRestaurants201Response, any>>;
}
export declare const RestaurantsApiService: RestaurantsApi;
